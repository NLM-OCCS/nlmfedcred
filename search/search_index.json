{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This module provides a command-line getawscreds that allows a user to assume a role in an AWS account based on their NIH Login account. On Windows, users can use their PIV card or password, but on other platforms, users must use their username and password. Service accounts also use a username and password. How it works The software requests your password or PIV PIN code, and then logs into NIH login using these parameters. NIH login returns HTML that encodes what accounts and roles you may become, along with a web form that would automatically submit to AWS. This software extracts the information, called a SAML Assertion, and presents it directly to the AWS API sts:AssumeRoleWithSAML . That API returns temporary credentials, typically good for about an hour. The software writes these into the AWS CLI credential file ~/.aws/credentials , or outputs the credentials for a bash shell or for Windows command-prompt ( cmd.exe ). Named Profiles A user may be granted the ability to authenticate to multiple roles on multiple accounts in AWS. The information about which accounts and roles are available is encoded into the SAML Assertion. Luckily, the AWS CLI and libraries support a concept called Named Profiles so that a user can manage the credentials for many profiles. In order to know which federated role corresponds to which profile in which AWS account, the getawscreds command-line read a configuration file. Typical Usage Once a configuration file is created, typical usage is to type: getawscreds -p profile --piv or getawscreds -p profile You will then be prompted as needed. Working with IDEs Since the temporary credentials are written into the standard AWS credentials file, ~/.aws/credentials , working with an IDE is usually as simple as specifying which AWS profile should be used.","title":"About"},{"location":"#how-it-works","text":"The software requests your password or PIV PIN code, and then logs into NIH login using these parameters. NIH login returns HTML that encodes what accounts and roles you may become, along with a web form that would automatically submit to AWS. This software extracts the information, called a SAML Assertion, and presents it directly to the AWS API sts:AssumeRoleWithSAML . That API returns temporary credentials, typically good for about an hour. The software writes these into the AWS CLI credential file ~/.aws/credentials , or outputs the credentials for a bash shell or for Windows command-prompt ( cmd.exe ).","title":"How it works"},{"location":"#named-profiles","text":"A user may be granted the ability to authenticate to multiple roles on multiple accounts in AWS. The information about which accounts and roles are available is encoded into the SAML Assertion. Luckily, the AWS CLI and libraries support a concept called Named Profiles so that a user can manage the credentials for many profiles. In order to know which federated role corresponds to which profile in which AWS account, the getawscreds command-line read a configuration file.","title":"Named Profiles"},{"location":"#typical-usage","text":"Once a configuration file is created, typical usage is to type: getawscreds -p profile --piv or getawscreds -p profile You will then be prompted as needed.","title":"Typical Usage"},{"location":"#working-with-ides","text":"Since the temporary credentials are written into the standard AWS credentials file, ~/.aws/credentials , working with an IDE is usually as simple as specifying which AWS profile should be used.","title":"Working with IDEs"},{"location":"config/","text":"Path On Windows, the getawscreds command-line looks first in %APPDATA%\\getawscreds.ini , and then at %USERPROFILE%\\.getawscreds . On Linux and MacOX, the only location checked is ~/.getawscreds . Purpose of Configuration The configuration is meant only to define the options that correspond to Named Profiles . Sections of the configuration file define options for a specific named profile, and the command-line typically saves the credentials to that named profile. Default Options The defaults that apply to all named profiles are in a section called \"[DEFAULT]\". For example, to set the default role within AWS to one named \"nlm_aws_users\", you would write: [DEFAULT] role = nlm_aws_users Profile Specific Options Roles such as \"devel\" or \"prod\" might be specified as below. [devel] idp = authtest.nih.gov account = 999999999900 duration = 14400 role = myapp_poweruser_role [prod] idp = auth.nih.gov account = 999999999901 role = myapp_user_role NOTE: These are not AWS account numbers or roles. Supported Options Each section within the configuration file supports these configurable parameters. These are also available on the command-line. Option Description idp Which federated server to use for authentication. This can optionally be a full url account The AWS account number role The role within AWS - may be an ARN or a name duration Controls the requested duration for the temporary credentials subject Controls which smartcard certificate will be used when authenticating by PIV username Allows a user to authenticate with a different username, for example a Service Account Setting the IDP (Identity Provider) The IDP has a default, and typical values. Through substitution, \"authexample.nih.gov\" would become the following: https://authexample.nih.gov/affwebservices/public/saml2sso?SPID=urn:amazon:webservices&appname=NLM You can optionally set the idp to the full URL as well in case you need to test something unusual.","title":"Configuration"},{"location":"config/#path","text":"On Windows, the getawscreds command-line looks first in %APPDATA%\\getawscreds.ini , and then at %USERPROFILE%\\.getawscreds . On Linux and MacOX, the only location checked is ~/.getawscreds .","title":"Path"},{"location":"config/#purpose-of-configuration","text":"The configuration is meant only to define the options that correspond to Named Profiles . Sections of the configuration file define options for a specific named profile, and the command-line typically saves the credentials to that named profile.","title":"Purpose of Configuration"},{"location":"config/#default-options","text":"The defaults that apply to all named profiles are in a section called \"[DEFAULT]\". For example, to set the default role within AWS to one named \"nlm_aws_users\", you would write: [DEFAULT] role = nlm_aws_users","title":"Default Options"},{"location":"config/#profile-specific-options","text":"Roles such as \"devel\" or \"prod\" might be specified as below. [devel] idp = authtest.nih.gov account = 999999999900 duration = 14400 role = myapp_poweruser_role [prod] idp = auth.nih.gov account = 999999999901 role = myapp_user_role NOTE: These are not AWS account numbers or roles.","title":"Profile Specific Options"},{"location":"config/#supported-options","text":"Each section within the configuration file supports these configurable parameters. These are also available on the command-line. Option Description idp Which federated server to use for authentication. This can optionally be a full url account The AWS account number role The role within AWS - may be an ARN or a name duration Controls the requested duration for the temporary credentials subject Controls which smartcard certificate will be used when authenticating by PIV username Allows a user to authenticate with a different username, for example a Service Account","title":"Supported Options"},{"location":"config/#setting-the-idp-identity-provider","text":"The IDP has a default, and typical values. Through substitution, \"authexample.nih.gov\" would become the following: https://authexample.nih.gov/affwebservices/public/saml2sso?SPID=urn:amazon:webservices&appname=NLM You can optionally set the idp to the full URL as well in case you need to test something unusual.","title":"Setting the IDP (Identity Provider)"},{"location":"howto/","text":"Typical Usage with a Profile Once the configuration file has been setup, the typical usage is to authenticate the current user to a named profile: getawscreds -p prod This will lookup the profile section called \"[prod]\" or fallback to the section called \"[DEFAULT]\", prompt the user for a password, submit the form, obtain credentials from AWS, and then write these to the AWS credentials file. Then, you can use the AWS CLI with that profile: aws ec2 describe-regions --profile prod What if I do not want to type --profile? If you define the environment variable \"AWS_PROFILE\", the aws command-line will honor it, and you can omit the argument to getawscreds: getawscreds -p What roles are available to me? Simply run getawscreds without arguments: getawscreds Typical output after you enter your password would be something like this: Multiple potential roles found. Use --account or --role argument to limit to one. Available roles below: arn:aws:iam::999999999900:role/myapp_user_role arn:aws:iam::999999999900:role/myapp_power_role arn:aws:iam::999999999901:role/myorg_user_role arn:aws:iam::999999999902:role/myorg_user_role arn:aws:iam::999999999903:role/myorg_user_role arn:aws:iam::999999999904:role/myorg_user_role arn:aws:iam::999999999905:role/myorg_user_role arn:aws:iam::999999999906:role/myorg_user_role NOTE: These are not real AWS role ARNs. How do I get credentials without saving them With a service account you can use the \"--shell\" console parameter along with a password: getawscreds -p int --shell bash --password XXXXXXXXXXXXXXXX This is not secure or really cloud-native, but it could be needed while you are getting started. You can also get output appropriate for the Windows command prompt: getawscreds -p int --shell cmd How can I authenticate with my PIV? You need to tell getawscreds which certificate to use by configuring the \"subject\" parameter in the configuration. Here's an example: [DEFAULT] subject = Daniel A. Davis -A (Affiliate) idp = authexample.nih.gov [devel] account = 999999999901 role = myapp_user_role Now, I can authenticate as follows: getawscreds -p devel --piv If you just logged in or authenticated to a website, you may not be prompted for your PIV at all. Note : This feature only supports Windows 10, and is pretty new.","title":"How To"},{"location":"howto/#typical-usage-with-a-profile","text":"Once the configuration file has been setup, the typical usage is to authenticate the current user to a named profile: getawscreds -p prod This will lookup the profile section called \"[prod]\" or fallback to the section called \"[DEFAULT]\", prompt the user for a password, submit the form, obtain credentials from AWS, and then write these to the AWS credentials file. Then, you can use the AWS CLI with that profile: aws ec2 describe-regions --profile prod","title":"Typical Usage with a Profile"},{"location":"howto/#what-if-i-do-not-want-to-type-profile","text":"If you define the environment variable \"AWS_PROFILE\", the aws command-line will honor it, and you can omit the argument to getawscreds: getawscreds -p","title":"What if I do not want to type --profile?"},{"location":"howto/#what-roles-are-available-to-me","text":"Simply run getawscreds without arguments: getawscreds Typical output after you enter your password would be something like this: Multiple potential roles found. Use --account or --role argument to limit to one. Available roles below: arn:aws:iam::999999999900:role/myapp_user_role arn:aws:iam::999999999900:role/myapp_power_role arn:aws:iam::999999999901:role/myorg_user_role arn:aws:iam::999999999902:role/myorg_user_role arn:aws:iam::999999999903:role/myorg_user_role arn:aws:iam::999999999904:role/myorg_user_role arn:aws:iam::999999999905:role/myorg_user_role arn:aws:iam::999999999906:role/myorg_user_role NOTE: These are not real AWS role ARNs.","title":"What roles are available to me?"},{"location":"howto/#how-do-i-get-credentials-without-saving-them","text":"With a service account you can use the \"--shell\" console parameter along with a password: getawscreds -p int --shell bash --password XXXXXXXXXXXXXXXX This is not secure or really cloud-native, but it could be needed while you are getting started. You can also get output appropriate for the Windows command prompt: getawscreds -p int --shell cmd","title":"How do I get credentials without saving them"},{"location":"howto/#how-can-i-authenticate-with-my-piv","text":"You need to tell getawscreds which certificate to use by configuring the \"subject\" parameter in the configuration. Here's an example: [DEFAULT] subject = Daniel A. Davis -A (Affiliate) idp = authexample.nih.gov [devel] account = 999999999901 role = myapp_user_role Now, I can authenticate as follows: getawscreds -p devel --piv If you just logged in or authenticated to a website, you may not be prompted for your PIV at all. Note : This feature only supports Windows 10, and is pretty new.","title":"How can I authenticate with my PIV?"},{"location":"install/","text":"Pre-requisites This software is written for CPython 3.6, and supported on Windows, Linux, and MacOS. It should work with Anaconda and more recent distributions of Python but is not tested on these platforms. Installation This module can be installed the same way you would install any other Python package. However, it is not distributed to the global PyPI repository. From a tarball or cloned distribution After expanding the tarball, change into that directory and issue the following command: python setup.py install A python sdist and binary wheel can be built as follows: python setup.py sdist bdist_wheel From a PyPI repository If you have placed a python sdist or binary wheel into a custom PyPI respository, and properly configured pip to use that custom repository, then you can install this package as follows: pip install nlmfedcred Smart Card Utility This also includes a smart card utility. To enable the smartcard utility, install PyKCS11: pip install PyKCS11","title":"Installation"},{"location":"install/#pre-requisites","text":"This software is written for CPython 3.6, and supported on Windows, Linux, and MacOS. It should work with Anaconda and more recent distributions of Python but is not tested on these platforms.","title":"Pre-requisites"},{"location":"install/#installation","text":"This module can be installed the same way you would install any other Python package. However, it is not distributed to the global PyPI repository.","title":"Installation"},{"location":"install/#from-a-tarball-or-cloned-distribution","text":"After expanding the tarball, change into that directory and issue the following command: python setup.py install A python sdist and binary wheel can be built as follows: python setup.py sdist bdist_wheel","title":"From a tarball or cloned distribution"},{"location":"install/#from-a-pypi-repository","text":"If you have placed a python sdist or binary wheel into a custom PyPI respository, and properly configured pip to use that custom repository, then you can install this package as follows: pip install nlmfedcred","title":"From a PyPI repository"},{"location":"install/#smart-card-utility","text":"This also includes a smart card utility. To enable the smartcard utility, install PyKCS11: pip install PyKCS11","title":"Smart Card Utility"},{"location":"smartcard/","text":"This page covers the Smart Card Utility which is an optional component. Installation In addition the regular requirements, the utility requires the optional package PyKCS11 . This package is optional because it can be hard to build and is generally not required. However, it can be useful when setting up PIV authentication on Windows, or extracting the public key for an EC2 Key Pair. Prompting for the PIV PIN The smart card will generally prompt you for the PIV PIN like this: Enter PIN: The PIN is never stored except in the script's memory. Setup for using --piv The most typical usage is to just fine exactly what you should put into the configuration file to get it to work: smartcard setup This will print something like: subject = Daniel A. Davis- A That's what you put in the configuration file. Note this must match exactly. Listing Certificates You can list all certificates on the smart card as follows: smartcard certs Extracting a public key You can extract a public key as follows: smartcard pubkey By default, this exports \"slot 0\" of the smart card. You can export a different slot as follows: smartcard pubkey --cert 1 If for some reason you want this as a PEM file rather than an OpenSSH key, use the option --format pem : smartcard pubkey --format pem If you want to save it to a file, give the --key path argument: smartcard pubkey --key id_rsa_piv.pub Problems Incorrect PIN It printed: PyKCS11.PyKCS11Error: CKR_PIN_INCORRECT (0x000000A0) This was an incorrect PIN - I don't want to make it too smart. It hangs If you are on Mac, try pulling out the PIV card and replacing it. Try again after replacing it. Other errors Try a different card reader - this is based on opensource software that may not work right with all card readers. More likely to work on Windows, actually.","title":"Smartcard Utility"},{"location":"smartcard/#installation","text":"In addition the regular requirements, the utility requires the optional package PyKCS11 . This package is optional because it can be hard to build and is generally not required. However, it can be useful when setting up PIV authentication on Windows, or extracting the public key for an EC2 Key Pair.","title":"Installation"},{"location":"smartcard/#prompting-for-the-piv-pin","text":"The smart card will generally prompt you for the PIV PIN like this: Enter PIN: The PIN is never stored except in the script's memory.","title":"Prompting for the PIV PIN"},{"location":"smartcard/#setup-for-using-piv","text":"The most typical usage is to just fine exactly what you should put into the configuration file to get it to work: smartcard setup This will print something like: subject = Daniel A. Davis- A That's what you put in the configuration file. Note this must match exactly.","title":"Setup for using --piv"},{"location":"smartcard/#listing-certificates","text":"You can list all certificates on the smart card as follows: smartcard certs","title":"Listing Certificates"},{"location":"smartcard/#extracting-a-public-key","text":"You can extract a public key as follows: smartcard pubkey By default, this exports \"slot 0\" of the smart card. You can export a different slot as follows: smartcard pubkey --cert 1 If for some reason you want this as a PEM file rather than an OpenSSH key, use the option --format pem : smartcard pubkey --format pem If you want to save it to a file, give the --key path argument: smartcard pubkey --key id_rsa_piv.pub","title":"Extracting a public key"},{"location":"smartcard/#problems","text":"","title":"Problems"},{"location":"smartcard/#incorrect-pin","text":"It printed: PyKCS11.PyKCS11Error: CKR_PIN_INCORRECT (0x000000A0) This was an incorrect PIN - I don't want to make it too smart.","title":"Incorrect PIN"},{"location":"smartcard/#it-hangs","text":"If you are on Mac, try pulling out the PIV card and replacing it. Try again after replacing it.","title":"It hangs"},{"location":"smartcard/#other-errors","text":"Try a different card reader - this is based on opensource software that may not work right with all card readers. More likely to work on Windows, actually.","title":"Other errors"},{"location":"trouble/","text":"This page provides trouble shooting procedures. Command Line Parameters How can I find all the command line parameters: getawscreds -h No SAML Binding No SAML Binding: could it be an invalid password? If it is not an invalid password, then your account may be locked. I got a RequestExpired error I ran getawscreds and it seemed to work, but now I see something like: An error occurred (RequestExpired) when ... This means that the temporary credentials have expired. However, it could be for a different \"Named Profile\". If you have multiple accounts and roles, it can get quite confusing. Quick trouble-shooting: Check the AWS_PROFILE environment variable. Check for a --profile parameter to the command. See what getawscreds command you ran. What was the SAML assertion? If something still is confusing, it is a good idea to verify that you are getting a SAML assertion, and to save it for analysis. You can do this using the command-line argument \"--samlout\". This sets the path to be used to save the SAML assertion: getawscreds --samlout saml_assertion.xml The assertion is saved in an XML format. You still will need to authenticate with the username and password to save it. The SAML assertion depends only on the idp and username - might be useful for a new service account, or one just moving from Development and integration to later stages: getawscreds --username ServiceAccount --idp authexample.nih.gov --samlout service-saml.xml I tried to extend the duration I put duration = 14400 in my configuration file, and now I cannot authenticate. The duration must be configured both by the CIT NIH Login team, in your AWS role, and then in the getawscreds command-line. Try to login to the AWS Console in your browser and literally check the maximum duration in the IAM > Roles area of the console.","title":"Trouble Shooting"},{"location":"trouble/#command-line-parameters","text":"How can I find all the command line parameters: getawscreds -h","title":"Command Line Parameters"},{"location":"trouble/#no-saml-binding","text":"No SAML Binding: could it be an invalid password? If it is not an invalid password, then your account may be locked.","title":"No SAML Binding"},{"location":"trouble/#i-got-a-requestexpired-error","text":"I ran getawscreds and it seemed to work, but now I see something like: An error occurred (RequestExpired) when ... This means that the temporary credentials have expired. However, it could be for a different \"Named Profile\". If you have multiple accounts and roles, it can get quite confusing. Quick trouble-shooting: Check the AWS_PROFILE environment variable. Check for a --profile parameter to the command. See what getawscreds command you ran.","title":"I got a RequestExpired error"},{"location":"trouble/#what-was-the-saml-assertion","text":"If something still is confusing, it is a good idea to verify that you are getting a SAML assertion, and to save it for analysis. You can do this using the command-line argument \"--samlout\". This sets the path to be used to save the SAML assertion: getawscreds --samlout saml_assertion.xml The assertion is saved in an XML format. You still will need to authenticate with the username and password to save it. The SAML assertion depends only on the idp and username - might be useful for a new service account, or one just moving from Development and integration to later stages: getawscreds --username ServiceAccount --idp authexample.nih.gov --samlout service-saml.xml","title":"What was the SAML assertion?"},{"location":"trouble/#i-tried-to-extend-the-duration","text":"I put duration = 14400 in my configuration file, and now I cannot authenticate. The duration must be configured both by the CIT NIH Login team, in your AWS role, and then in the getawscreds command-line. Try to login to the AWS Console in your browser and literally check the maximum duration in the IAM > Roles area of the console.","title":"I tried to extend the duration"}]}